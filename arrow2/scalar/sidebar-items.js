initSidebarItems({"fn":[["new_scalar","creates a new [`Scalar`] from an [`Array`]."]],"struct":[["BinaryScalar","The [`Scalar`] implementation of binary ([`Option<Vec<u8>>`])."],["BooleanScalar","The [`Scalar`] implementation of a boolean."],["DictionaryScalar","The [`DictionaryArray`] equivalent of [`Array`] for [`Scalar`]."],["FixedSizeBinaryScalar","The [`Scalar`] implementation of fixed size binary ([`Option<Box<[u8]>>`])."],["FixedSizeListScalar","The scalar equivalent of [`FixedSizeListArray`]. Like [`FixedSizeListArray`], this struct holds a dynamically-typed [`Array`]. The only difference is that this has only one element."],["ListScalar","The scalar equivalent of [`ListArray`]. Like [`ListArray`], this struct holds a dynamically-typed [`Array`]. The only difference is that this has only one element."],["NullScalar","The representation of a single entry of a [`crate::array::NullArray`]."],["PrimitiveScalar","The implementation of [`Scalar`] for primitive, semantically equivalent to [`Option<T>`] with [`DataType`]."],["StructScalar","A single entry of a [`crate::array::StructArray`]."],["Utf8Scalar","The implementation of [`Scalar`] for utf8, semantically equivalent to [`Option<String>`]."]],"trait":[["Scalar","Trait object declaring an optional value with a [`DataType`]. This strait is often used in APIs that accept multiple scalar types."]]});