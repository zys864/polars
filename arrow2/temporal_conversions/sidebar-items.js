initSidebarItems({"constant":[["EPOCH_DAYS_FROM_CE","Number of days between 0001-01-01 and 1970-01-01"],["MICROSECONDS","Number of microseconds in a second"],["MILLISECONDS","Number of milliseconds in a second"],["MILLISECONDS_IN_DAY","Number of milliseconds in a day"],["NANOSECONDS","Number of nanoseconds in a second"],["SECONDS_IN_DAY","Number of seconds in a day"]],"fn":[["add_interval","Adds an `interval` to a `timestamp` in `time_unit` units and timezone `timezone`."],["add_naive_interval","Adds an `interval` to a `timestamp` in `time_unit` units without timezone."],["date32_to_date","converts a `i32` representing a `date32` to [`NaiveDate`]"],["date32_to_datetime","converts a `i32` representing a `date32` to [`NaiveDateTime`]"],["date64_to_date","converts a `i64` representing a `date64` to [`NaiveDate`]"],["date64_to_datetime","converts a `i64` representing a `date64` to [`NaiveDateTime`]"],["parse_offset","Parses an offset of the form `\"+WX:YZ\"` or `\"UTC\"` into [`FixedOffset`]."],["time32ms_to_time","converts a `i32` representing a `time32(ms)` to [`NaiveTime`]"],["time32s_to_time","converts a `i32` representing a `time32(s)` to [`NaiveDateTime`]"],["time64ns_to_time","converts a `i64` representing a `time64(ns)` to [`NaiveDateTime`]"],["time64us_to_time","converts a `i64` representing a `time64(us)` to [`NaiveDateTime`]"],["timestamp_ms_to_datetime","converts a `i64` representing a `timestamp(ms)` to [`NaiveDateTime`]"],["timestamp_ns_to_datetime","converts a `i64` representing a `timestamp(ns)` to [`NaiveDateTime`]"],["timestamp_s_to_datetime","converts a `i64` representing a `timestamp(s)` to [`NaiveDateTime`]"],["timestamp_to_datetime","Converts a timestamp in `time_unit` and `timezone` into [`chrono::DateTime`]."],["timestamp_to_naive_datetime","Converts a timestamp in `time_unit` and `timezone` into [`chrono::DateTime`]."],["timestamp_us_to_datetime","converts a `i64` representing a `timestamp(us)` to [`NaiveDateTime`]"],["timeunit_scale","Calculates the scale factor between two TimeUnits. The function returns the scale that should multiply the TimeUnit “b” to have the same time scale as the TimeUnit “a”."],["utf8_to_naive_timestamp_ns","Parses a [`Utf8Array`] to naive timestamp, i.e. [`PrimitiveArray<i64>`] with type `Timestamp(Nanosecond, None)`. Timezones are ignored. Null elements remain null; non-parsable elements are set to null."],["utf8_to_naive_timestamp_ns_scalar","Parses `value` to `Option<i64>` consistent with the Arrow’s definition of timestamp without timezone."],["utf8_to_timestamp_ns","Parses a [`Utf8Array`] to a timeozone-aware timestamp, i.e. [`PrimitiveArray<i64>`] with type `Timestamp(Nanosecond, Some(timezone))`."],["utf8_to_timestamp_ns_scalar","Parses `value` to `Option<i64>` consistent with the Arrow’s definition of timestamp with timezone. `tz` must be built from `timezone` (either via [`parse_offset`] or `chrono-tz`)."]]});