initSidebarItems({"fn":[["convert","Converts a normal `Iterator` over `Results` of references into a `FallibleStreamingIterator`."],["empty","Returns an iterator over no items."],["serialize","Serializes a (name, array) to a valid JSON to `buffer` This is CPU-bounded"],["write","Writes blocks of JSON-encoded data into `writer`, ensuring that the written JSON has the expected `format`"]],"struct":[["Convert","An iterator which wraps a normal `Iterator`."],["Empty","An iterator over no items."],["Filter","An iterator which filters elements with a predicate."],["Fuse","An iterator which is well-behaved at the beginning and end of iteration."],["JsonArray","Produces JSON output as a single JSON array. For example"],["LineDelimited","Produces JSON output with one record per line. For example"],["Map","An iterator which applies a transform to elements."],["MapErr","An iterator which applies a transform to errors."],["MapRef","An iterator which applies a transform to elements."],["Serializer","[`FallibleStreamingIterator`] that serializes a [`Chunk`] to bytes. Advancing it is CPU-bounded"],["Skip","An iterator which skips a number of initial elements."],["SkipWhile","An iterator which skips initial elements matching a predicate."],["Take","An iterator which only returns a number of initial elements."],["TakeWhile","An iterator which only returns initial elements matching a predicate."]],"trait":[["DoubleEndedFallibleStreamingIterator","A fallible, streaming iterator which can be advanced from either end."],["FallibleStreamingIterator","A fallible, streaming iterator."],["JsonFormat","Trait defining how to format a sequence of JSON objects to a byte stream."]]});